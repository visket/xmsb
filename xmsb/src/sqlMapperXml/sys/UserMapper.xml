<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.cody.mapper.sys.UserMapper">
    <resultMap id="BaseResultMap" type="com.cody.entity.sys.User">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="loginname" property="loginname" jdbcType="VARCHAR"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="sex" property="sex" jdbcType="TINYINT"/>
        <result column="age" property="age" jdbcType="TINYINT"/>
        <result column="usertype" property="usertype" jdbcType="TINYINT"/>
        <result column="status" property="status" jdbcType="TINYINT"/>
        <result column="organization_id" property="organizationId" jdbcType="INTEGER"/>
        <result column="createdate" property="createdate" jdbcType="TIMESTAMP"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="job_id" property="jobId" jdbcType="VARCHAR"/>
        <result column="isCompany" property="isCompany" jdbcType="TINYINT"/>
        <result column="unit_id" property="unitId" jdbcType="VARCHAR"/>
        <result column="newusertype" property="newusertype" jdbcType="VARCHAR"/>
        <result column="tradetype" property="tradetype" jdbcType="VARCHAR"/>
    </resultMap>
    <resultMap id="userVoResultMap" type="com.cody.vo.sys.UserVo">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="loginname" property="loginname" jdbcType="VARCHAR"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="sex" property="sex" jdbcType="TINYINT"/>
        <result column="age" property="age" jdbcType="TINYINT"/>
        <result column="usertype" property="usertype" jdbcType="TINYINT"/>
        <result column="status" property="status" jdbcType="TINYINT"/>
        <result column="organization_id" property="organizationId" jdbcType="INTEGER"/>
        <result column="createdate" property="createdate" jdbcType="TIMESTAMP"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="organizationName" property="organizationName" jdbcType="VARCHAR"/>
		<result column="job_id" property="jobId" jdbcType="VARCHAR"/>
		<result column="isCompany" property="isCompany" jdbcType="TINYINT"/>
        <result column="unit_id" property="unitId" jdbcType="VARCHAR"/>
        <result column="newusertype" property="newusertype" jdbcType="VARCHAR"/>
        <result column="tradetype" property="tradetype" jdbcType="VARCHAR"/>
        <result column="unitName" property="unitName" jdbcType="VARCHAR"/>
        <result column="typename" property="typename" jdbcType="VARCHAR"/>
        <result column="tradetypename" property="tradetypename" jdbcType="VARCHAR"/>
         <result column="unname" property="unName" jdbcType="VARCHAR"/>
        <collection property="rolesList" ofType="Role">
            <id column="roleId" property="id"/>
            <result column="roleName" property="name"/>
        </collection>
    </resultMap>
    <sql id="Base_Column_List">
     id, loginname, name, password, sex, age, usertype, status, organization_id, createdate, 
    phone,unit_id,newusertype,tradetype 
  </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from user
        where id = #{id,jdbcType=BIGINT}
    </select>

    <select id="findUserByLoginName" resultMap="userVoResultMap" parameterType="java.lang.String">
        select
        a.id, a.loginname, a.name, a.password, sex, age, usertype, a.status, a.organization_id, a.createdate,  
    	a.phone,unit_id,newusertype,tradetype,b.name AS unName 
        from user a 
        left join t_sys_unit b on a.unit_id = b.id
        where loginname = #{username}
    </select>
<!--  o.id AS roleId,o.`name` AS roleName, -->
    <select id="findUserVoById" resultMap="userVoResultMap" parameterType="java.lang.Long">
        SELECT
        t.id,
        loginname,
        t.`name`,
        `password`,
        sex,
        age,
        usertype,
        t.`status`,
        t.organization_id,
        t.createdate,
        t.phone,
        s.`name` AS organizationName,
        o.id AS roleId,
        o.`name` AS roleName,
        unit.id as unitId,
        unit.name as unitName 
        FROM
        user t
        LEFT JOIN user_role r ON t.id = r.user_id
        LEFT JOIN role o ON r.role_id = o.id
        LEFT JOIN organization s ON s.id = t.organization_id
        left join t_sys_unit unit on unit.id = t.unit_id
        <where>
            t.id = #{id}
        </where>
    </select>

    <select id="findUserById" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from user
        where id = #{id}
    </select>
<!--  
       o.id AS roleId,  o.`name` AS roleName, 前面两个字段会使得DISTINCT失效 roleId roleName 是与rolesList联合起来使用
       前台page参数传递过来是0，20数据库中查询的结果是20条，但实际程序userMapper.findUserPageCondition(pageInfo).size()结果只有18条
       猜测是userVoResultMap中 <collection property="rolesList" ofType="Role"> 去重导致
 -->
 <!--  t.name = #{condition.name}  -->
    <select id="findUserPageCondition" resultMap="userVoResultMap" parameterType="PageInfo">
        SELECT 
        t.id,
        loginname,
        t.`name`,
        `password`,
        sex,
        age,
        usertype,
        t.`status`,
        t.organization_id,
        t.createdate,
        t.phone,
        t.unit_id,
        s.`name` AS organizationName,
        o.id AS roleId,
        o.`name` AS roleName, 
		unit.id as unitId,
        unit.name as unitName,
        newusertype,
        tradetype,
        i.itemvalue as  typename,
        i2.itemvalue as tradetypename
        FROM
        user t
        LEFT JOIN user_role r ON t.id = r.user_id
        LEFT JOIN role o ON r.role_id = o.id
        LEFT JOIN organization s ON s.id = t.organization_id
        left join t_sys_unit unit on unit.id = t.unit_id
        left join item i  on i.id=newusertype
        left join item i2  on i2.id=tradetype
        <where>
            t.status>-1
            <if test=" condition.name != null and condition.name != '' ">
               and  t.name  like concat(#{condition.name,jdbcType=VARCHAR},'%')
            </if>
            <if test=" condition.newusertype != null and condition.newusertype != '' ">
                and t.newusertype = #{condition.newusertype}
            </if>
            <if test=" condition.tradetype != null and condition.tradetype != '' ">
                and  t.tradetype = #{condition.tradetype}
            </if>
            <if test=" condition.organizationId != null ">
                and t.organization_id = #{condition.organizationId}
            </if>
            <if test="condition.startTime != null">
                <![CDATA[
            and t.createdate >= #{condition.startTime}
           ]]>
            </if>
            <if test="condition.endTime != null">
                <![CDATA[
            and t.createdate <= #{condition.endTime}
        ]]>
            </if>
            <if test="dataScope != null and ( dataScope.dataFilterSql != null and dataScope.dataFilterSql != '' )">
            	${dataScope.dataFilterSql}
            </if>
        </where>
        LIMIT #{from}, #{size}
    </select>
<!--  select count(*) count -->
    <select id="findUserPageCount" resultType="java.lang.Integer" parameterType="PageInfo">
        select count(distinct t.id) count
        from user t
        LEFT JOIN user_role r ON t.id = r.user_id
        LEFT JOIN role o ON r.role_id = o.id
        LEFT JOIN organization s ON s.id = t.organization_id
        <where>
             t.status>-1
            <if test=" condition.name != null and condition.name != '' ">
                and t.name = #{condition.name}
            </if>
            <if test=" condition.newusertype != null and condition.newusertype != '' ">
                and t.newusertype = #{condition.newusertype}
            </if>
            <if test=" condition.tradetype != null and condition.tradetype != '' ">
                and t.tradetype = #{condition.tradetype}
            </if>
            <if test=" condition.organizationId != null ">
                and t.organization_id = #{condition.organizationId}
            </if>
            <if test="condition.startTime != null">
                <![CDATA[
                and t.createdate >= #{condition.startTime}
           ]]>
            </if>
            <if test="condition.endTime != null">
                <![CDATA[
            and t.createdate <= #{condition.endTime}
            ]]>
            </if>
            <if test="dataScope != null and ( dataScope.dataFilterSql != null and dataScope.dataFilterSql != '' )">
            	${dataScope.dataFilterSql}
            </if>
        </where>
    </select>

    <delete id="deleteById" parameterType="java.lang.Long">
    delete from user
    where id = #{id,jdbcType=BIGINT}
  </delete>
  
  
  <delete id="deleteByPrimaryKeys" parameterType="java.lang.String">
  	delete from user 
  	<where>
  		<foreach collection="array" item="item" separator="or">
			id =  #{item}
    	</foreach>
  	</where>
  </delete>

<!--
    <insert id="insert" parameterType="com.cody.entity.sys.User" useGeneratedKeys="true" keyProperty="id">
        insert into user (id, loginname, name, password,
        sex, age, usertype,
        status, organization_id, createdate,
        phone,supplyer_id)
        values (#{id},#{loginname,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
        #{sex,jdbcType=TINYINT}, #{age,jdbcType=TINYINT}, #{usertype,jdbcType=TINYINT},
        #{status,jdbcType=TINYINT}, #{organizationId,jdbcType=INTEGER}, now(),
        #{phone,jdbcType=VARCHAR},#{supplyerId})
    </insert>
-->    

    <insert id="insert" parameterType="com.cody.entity.sys.User" useGeneratedKeys="true" keyProperty="id">
        insert into user (id, loginname, name, password,
        sex, age, usertype,
        status, organization_id, createdate,
        phone,unit_id,newusertype,tradetype)
        values (#{id},#{loginname,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
        #{sex,jdbcType=TINYINT}, #{age,jdbcType=TINYINT}, #{usertype,jdbcType=TINYINT},
        #{status,jdbcType=TINYINT}, #{organizationId,jdbcType=INTEGER}, now(),
        #{phone,jdbcType=VARCHAR},#{unitId,jdbcType=VARCHAR},#{newusertype},#{tradetype})
    </insert>

    <update id="updateUserPwdById">
    update user
    set password = #{pwd,jdbcType=VARCHAR},
    createdate = now()
    where id = #{userId,jdbcType=BIGINT}
  </update>

    <update id="updateUser" parameterType="com.cody.entity.sys.User">
        update user
        <set>
            <if test="loginname != null">
                loginname = #{loginname,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                sex = #{sex,jdbcType=TINYINT},
            </if>
            <if test="age != null">
                age = #{age,jdbcType=TINYINT},
            </if>
            <if test="usertype != null">
                usertype = #{usertype,jdbcType=TINYINT},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=TINYINT},
            </if>
            <if test="organizationId != null">
                organization_id = #{organizationId,jdbcType=INTEGER},
            </if>
            <if test="createdate != null">
                createdate = #{createdate,jdbcType=TIMESTAMP},
            </if>
            <if test="phone != null">
                phone = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="unitId != null">
                unit_id = #{unitId,jdbcType=VARCHAR},
            </if>
            <if test="newusertype != null">
            	newusertype =#{newusertype},
            </if>
            <if test="tradetype != null">
            	tradetype =#{tradetype},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    
    
    
    
    
    
	<select id="findCombogridCount" resultType="java.lang.Integer" parameterType="PageInfo">
		select count(*) count
		from user
		<where>
			<foreach collection="condition" item="item" index="key" separator="and">
				${key} like &amp;#{item}&amp;
       		</foreach>
		</where>
	</select>
    
    <select id="findCombogridCondition" resultMap="userVoResultMap" parameterType="PageInfo">
        SELECT
        t.id,
        loginname,
        t.`name`,
        `password`,
        sex,
        age,
        usertype,
        t.`status`,
        organization_id,
        t.createdate,
        phone,
        s.`name` AS organizationName 
        FROM
        user t
        LEFT JOIN organization s ON s.id = t.organization_id 
        <where>
			<foreach collection="condition" item="item" index="key" separator="and">
				${key} #{item}
       		</foreach>
		</where>
		ORDER BY ${sort} ${order}
		LIMIT #{from}, #{size}
    </select>
    
    
    <select id="findUserByTypeId" resultMap="userVoResultMap" parameterType="PageInfo">
        SELECT
        t.id,
        loginname,
        t.`name`,
        `password`,
        sex,
        age,
        usertype,
        t.`status`,
        organization_id,
        t.createdate,
        phone,
        s.`name` AS organizationName 
        FROM
        user t
        LEFT JOIN organization s ON s.id = t.organization_id 
        left join user_role r on r.user_id = t.id
        <where>
			t.newusertype = '32bd5204-f1a4-4798-ba61-25d4d711bf74'
			or r.role_id = 19
		</where>
		ORDER BY ${sort} ${order}
		LIMIT #{from}, #{size}
    </select>
    
    
    
</mapper>